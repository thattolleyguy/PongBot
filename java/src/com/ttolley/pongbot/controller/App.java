/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ttolley.pongbot.controller;

import com.ttolley.pongbot.opencv.CvWorker;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author tyler
 */
public class App extends javax.swing.JFrame implements KeyListener {

    SerialTurret turret;
    byte inputState = 0;

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        turret = new SerialTurret();
        worker = new CvWorker();

        addKeyListener(this);

    }
    private final CvWorker worker;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        hueMinLabel = new javax.swing.JLabel();
        hueMinSlider = new javax.swing.JSlider();
        hueMaxLabel = new javax.swing.JLabel();
        hueMaxSlider = new javax.swing.JSlider();
        saturationMinLabel = new javax.swing.JLabel();
        saturationMinSlider = new javax.swing.JSlider();
        saturationMaxLabel = new javax.swing.JLabel();
        saturationMaxSlider = new javax.swing.JSlider();
        valueMinLabel = new javax.swing.JLabel();
        valueMinSlider = new javax.swing.JSlider();
        valueMaxLabel = new javax.swing.JLabel();
        valueMaxSlider = new javax.swing.JSlider();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        dataField = new java.awt.TextField();
        jPanel4 = new javax.swing.JPanel();
        sendButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        hueMinLabel.setText("Hue Min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(hueMinLabel, gridBagConstraints);

        hueMinSlider.setMaximum(180);
        hueMinSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hueMinSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(hueMinSlider, gridBagConstraints);

        hueMaxLabel.setText("Hue Max");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel1.add(hueMaxLabel, gridBagConstraints);

        hueMaxSlider.setMaximum(180);
        hueMaxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hueMaxSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel1.add(hueMaxSlider, gridBagConstraints);

        saturationMinLabel.setText("Saturation Min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel1.add(saturationMinLabel, gridBagConstraints);

        saturationMinSlider.setMaximum(256);
        saturationMinSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                saturationMinSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jPanel1.add(saturationMinSlider, gridBagConstraints);

        saturationMaxLabel.setText("Saturation Max");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel1.add(saturationMaxLabel, gridBagConstraints);

        saturationMaxSlider.setMaximum(256);
        saturationMaxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                saturationMaxSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanel1.add(saturationMaxSlider, gridBagConstraints);

        valueMinLabel.setText("Value Min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel1.add(valueMinLabel, gridBagConstraints);

        valueMinSlider.setMaximum(256);
        valueMinSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valueMinSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        jPanel1.add(valueMinSlider, gridBagConstraints);

        valueMaxLabel.setText("Value Max");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        jPanel1.add(valueMaxLabel, gridBagConstraints);

        valueMaxSlider.setMaximum(256);
        valueMaxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valueMaxSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        jPanel1.add(valueMaxSlider, gridBagConstraints);

        jButton1.setText("Start CV");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new java.awt.GridBagConstraints());

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());
        jPanel2.add(dataField, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanel3.add(jPanel2, gridBagConstraints);

        jPanel4.setLayout(new java.awt.BorderLayout());

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        jPanel4.add(sendButton, java.awt.BorderLayout.PAGE_START);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel3.add(jPanel4, gridBagConstraints);

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        jPanel3.add(connectButton, new java.awt.GridBagConstraints());

        getContentPane().add(jPanel3, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hueMinSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hueMinSliderStateChanged
        if (hueMaxSlider.getValue() < hueMinSlider.getValue()) {
            hueMaxSlider.setValue(hueMinSlider.getValue());
        }
        updateFilter();
    }//GEN-LAST:event_hueMinSliderStateChanged

    private void hueMaxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hueMaxSliderStateChanged
        if (hueMaxSlider.getValue() < hueMinSlider.getValue()) {
            hueMinSlider.setValue(hueMaxSlider.getValue());
        }
        updateFilter();
    }//GEN-LAST:event_hueMaxSliderStateChanged

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if (!turret.initialize()) {
            throw new IllegalStateException("Unable to initialize serial connection");
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        final String data = dataField.getText();
        dataField.setText("");
        turret.sendTurretCommand(data.getBytes());
    }//GEN-LAST:event_sendButtonActionPerformed

    private void saturationMinSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_saturationMinSliderStateChanged
        if (saturationMaxSlider.getValue() < saturationMinSlider.getValue()) {
            saturationMaxSlider.setValue(saturationMinSlider.getValue());
        }
        updateFilter();
    }//GEN-LAST:event_saturationMinSliderStateChanged

    private void saturationMaxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_saturationMaxSliderStateChanged
        if (saturationMaxSlider.getValue() < saturationMinSlider.getValue()) {
            saturationMinSlider.setValue(saturationMaxSlider.getValue());
        }
        updateFilter();
    }//GEN-LAST:event_saturationMaxSliderStateChanged

    private void valueMinSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valueMinSliderStateChanged
        if (valueMaxSlider.getValue() < valueMinSlider.getValue()) {
            valueMaxSlider.setValue(valueMinSlider.getValue());
        }
        updateFilter();
    }//GEN-LAST:event_valueMinSliderStateChanged

    private void valueMaxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valueMaxSliderStateChanged
        if (valueMaxSlider.getValue() < valueMinSlider.getValue()) {
            valueMinSlider.setValue(valueMaxSlider.getValue());
        }
        updateFilter();
    }//GEN-LAST:event_valueMaxSliderStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        worker.execute();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    private void updateFilter() {
        this.worker.updateFilter(hueMinSlider.getValue(), hueMaxSlider.getValue(),
                saturationMinSlider.getValue(), saturationMaxSlider.getValue(),
                valueMinSlider.getValue(), valueMaxSlider.getValue());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private java.awt.TextField dataField;
    private javax.swing.JLabel hueMaxLabel;
    private javax.swing.JSlider hueMaxSlider;
    private javax.swing.JLabel hueMinLabel;
    private javax.swing.JSlider hueMinSlider;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel saturationMaxLabel;
    private javax.swing.JSlider saturationMaxSlider;
    private javax.swing.JLabel saturationMinLabel;
    private javax.swing.JSlider saturationMinSlider;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel valueMaxLabel;
    private javax.swing.JSlider valueMaxSlider;
    private javax.swing.JLabel valueMinLabel;
    private javax.swing.JSlider valueMinSlider;
    // End of variables declaration//GEN-END:variables
    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_NUMPAD1:
                turret.sendTurretCommand("1".getBytes());
                break;
            case KeyEvent.VK_NUMPAD2:
                turret.sendTurretCommand("2".getBytes());
                break;
            case KeyEvent.VK_NUMPAD3:
                turret.sendTurretCommand("3".getBytes());
                break;
            case KeyEvent.VK_NUMPAD4:
                turret.sendTurretCommand("4".getBytes());
                break;
            case KeyEvent.VK_NUMPAD5:
                turret.sendTurretCommand("5".getBytes());
                break;
            case KeyEvent.VK_NUMPAD6:
                turret.sendTurretCommand("6".getBytes());
                break;
            case KeyEvent.VK_NUMPAD7:
                turret.sendTurretCommand("7".getBytes());
                break;
            case KeyEvent.VK_NUMPAD8:
                turret.sendTurretCommand("8".getBytes());
                break;
            case KeyEvent.VK_NUMPAD9:
                turret.sendTurretCommand("9".getBytes());
                break;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        Command command = Command.fromKey(e.getKeyCode());
        if (command != null) {
            this.inputState &= ~command.commandBit;
//            turret.sendTurretCommand(inputState);

        }
    }

    TimerTask timerTask;
}
