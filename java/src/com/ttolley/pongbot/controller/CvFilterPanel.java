/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ttolley.pongbot.controller;

import com.ttolley.pongbot.opencv.CvWorker;
import com.ttolley.pongbot.opencv.CvWorker.Filter;

/**
 *
 * @author tyler
 */
public class CvFilterPanel extends javax.swing.JPanel {

    /**
     * Creates new form CvFilterPanel
     */
    private final CvWorker.Filter filter;

    public CvFilterPanel(Filter filter) {
        initComponents();
        this.filter = filter;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        hueMinLabel = new javax.swing.JLabel();
        hueMinSlider = new javax.swing.JSlider();
        hueMaxLabel = new javax.swing.JLabel();
        hueMaxSlider = new javax.swing.JSlider();
        saturationMinLabel = new javax.swing.JLabel();
        saturationMinSlider = new javax.swing.JSlider();
        saturationMaxLabel = new javax.swing.JLabel();
        saturationMaxSlider = new javax.swing.JSlider();
        valueMinLabel = new javax.swing.JLabel();
        valueMinSlider = new javax.swing.JSlider();
        valueMaxLabel = new javax.swing.JLabel();
        valueMaxSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        maxObjectSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        objectSizeSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        erodeSizeSpinner = new javax.swing.JSpinner();
        dilateSizeSpinner = new javax.swing.JSpinner();

        setLayout(new java.awt.GridBagLayout());

        hueMinLabel.setText("Hue Min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(hueMinLabel, gridBagConstraints);

        hueMinSlider.setMaximum(180);
        hueMinSlider.setPaintTicks(true);
        hueMinSlider.setValue(10);
        hueMinSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hueMinSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(hueMinSlider, gridBagConstraints);

        hueMaxLabel.setText("Hue Max");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(hueMaxLabel, gridBagConstraints);

        hueMaxSlider.setMaximum(180);
        hueMaxSlider.setValue(36);
        hueMaxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hueMaxSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        add(hueMaxSlider, gridBagConstraints);

        saturationMinLabel.setText("Saturation Min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(saturationMinLabel, gridBagConstraints);

        saturationMinSlider.setMaximum(256);
        saturationMinSlider.setValue(75);
        saturationMinSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                saturationMinSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        add(saturationMinSlider, gridBagConstraints);

        saturationMaxLabel.setText("Saturation Max");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        add(saturationMaxLabel, gridBagConstraints);

        saturationMaxSlider.setMaximum(256);
        saturationMaxSlider.setValue(256);
        saturationMaxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                saturationMaxSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        add(saturationMaxSlider, gridBagConstraints);

        valueMinLabel.setText("Value Min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(valueMinLabel, gridBagConstraints);

        valueMinSlider.setMaximum(256);
        valueMinSlider.setValue(170);
        valueMinSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valueMinSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        add(valueMinSlider, gridBagConstraints);

        valueMaxLabel.setText("Value Max");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        add(valueMaxLabel, gridBagConstraints);

        valueMaxSlider.setMaximum(256);
        valueMaxSlider.setValue(256);
        valueMaxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                valueMaxSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        add(valueMaxSlider, gridBagConstraints);

        jLabel1.setText("Max Objects");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        add(jLabel1, gridBagConstraints);

        maxObjectSpinner.setValue(3);
        maxObjectSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxObjectSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        add(maxObjectSpinner, gridBagConstraints);

        jLabel2.setText("Object Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        add(jLabel2, gridBagConstraints);

        objectSizeSpinner.setValue(20);
        objectSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                objectSizeSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        add(objectSizeSpinner, gridBagConstraints);

        jLabel3.setText("Erode Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        add(jLabel3, gridBagConstraints);

        jLabel4.setText("Dilate Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        add(jLabel4, gridBagConstraints);

        erodeSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                erodeSizeSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        add(erodeSizeSpinner, gridBagConstraints);

        dilateSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dilateSizeSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        add(dilateSizeSpinner, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void hueMinSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hueMinSliderStateChanged
        
        this.filter.hsv_min.val[0] = hueMinSlider.getValue();
        if (hueMaxSlider.getValue() < hueMinSlider.getValue()) {
            hueMaxSlider.setValue(hueMinSlider.getValue());
            this.filter.hsv_max.val[0] = hueMinSlider.getValue();
        }
        hueMinLabel.setText("Hue Min (" + hueMinSlider.getValue() + ")");
    }//GEN-LAST:event_hueMinSliderStateChanged

    private void hueMaxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hueMaxSliderStateChanged
        this.filter.hsv_max.val[0] = hueMaxSlider.getValue();
        if (hueMaxSlider.getValue() < hueMinSlider.getValue()) {
            hueMinSlider.setValue(hueMaxSlider.getValue());
            this.filter.hsv_min.val[0] = hueMaxSlider.getValue();
        }
        hueMaxLabel.setText("Hue Max (" + hueMaxSlider.getValue() + ")");

    }//GEN-LAST:event_hueMaxSliderStateChanged

    private void saturationMinSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_saturationMinSliderStateChanged
        this.filter.hsv_min.val[1] = saturationMinSlider.getValue();
        if (saturationMaxSlider.getValue() < saturationMinSlider.getValue()) {
            saturationMaxSlider.setValue(saturationMinSlider.getValue());
            this.filter.hsv_max.val[1] = saturationMinSlider.getValue();
        }
        saturationMinLabel.setText("Saturation Min (" + saturationMinSlider.getValue() + ")");

    }//GEN-LAST:event_saturationMinSliderStateChanged

    private void saturationMaxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_saturationMaxSliderStateChanged
        this.filter.hsv_max.val[1] = saturationMaxSlider.getValue();
        if (saturationMaxSlider.getValue() < saturationMinSlider.getValue()) {
            saturationMinSlider.setValue(saturationMaxSlider.getValue());
            this.filter.hsv_min.val[1] = saturationMaxSlider.getValue();

        }

        saturationMaxLabel.setText("Saturation Max (" + saturationMaxSlider.getValue() + ")");
    }//GEN-LAST:event_saturationMaxSliderStateChanged

    private void valueMinSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valueMinSliderStateChanged
        this.filter.hsv_min.val[2] = valueMinSlider.getValue();
        if (valueMaxSlider.getValue() < valueMinSlider.getValue()) {
            valueMaxSlider.setValue(valueMinSlider.getValue());
            this.filter.hsv_max.val[2] = valueMinSlider.getValue();
        }

        valueMinLabel.setText("Value Min (" + valueMinSlider.getValue() + ")");
    }//GEN-LAST:event_valueMinSliderStateChanged

    private void valueMaxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_valueMaxSliderStateChanged
        this.filter.hsv_max.val[2] = valueMaxSlider.getValue();
        if (valueMaxSlider.getValue() < valueMinSlider.getValue()) {
            valueMinSlider.setValue(valueMaxSlider.getValue());
            this.filter.hsv_min.val[2] = valueMaxSlider.getValue();
        }

        valueMaxLabel.setText("Value Max (" + valueMaxSlider.getValue() + ")");
    }//GEN-LAST:event_valueMaxSliderStateChanged

    private void objectSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_objectSizeSpinnerStateChanged
        this.filter.objectSize = (Integer) objectSizeSpinner.getValue();
    }//GEN-LAST:event_objectSizeSpinnerStateChanged

    private void erodeSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_erodeSizeSpinnerStateChanged
        if ((Integer) erodeSizeSpinner.getValue() <= 0) {
            erodeSizeSpinner.setValue(1);
        }
        this.filter.erodeSize = (Integer) erodeSizeSpinner.getValue();
    }//GEN-LAST:event_erodeSizeSpinnerStateChanged

    private void dilateSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dilateSizeSpinnerStateChanged
        if ((Integer) dilateSizeSpinner.getValue() <= 0) {
            dilateSizeSpinner.setValue(1);
        }
        this.filter.dilateSize = (Integer) dilateSizeSpinner.getValue();
    }//GEN-LAST:event_dilateSizeSpinnerStateChanged

    private void maxObjectSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxObjectSpinnerStateChanged
        this.filter.maxObjects = (Integer) maxObjectSpinner.getValue();
    }//GEN-LAST:event_maxObjectSpinnerStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner dilateSizeSpinner;
    private javax.swing.JSpinner erodeSizeSpinner;
    private javax.swing.JLabel hueMaxLabel;
    private javax.swing.JSlider hueMaxSlider;
    private javax.swing.JLabel hueMinLabel;
    private javax.swing.JSlider hueMinSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSpinner maxObjectSpinner;
    private javax.swing.JSpinner objectSizeSpinner;
    private javax.swing.JLabel saturationMaxLabel;
    private javax.swing.JSlider saturationMaxSlider;
    private javax.swing.JLabel saturationMinLabel;
    private javax.swing.JSlider saturationMinSlider;
    private javax.swing.JLabel valueMaxLabel;
    private javax.swing.JSlider valueMaxSlider;
    private javax.swing.JLabel valueMinLabel;
    private javax.swing.JSlider valueMinSlider;
    // End of variables declaration//GEN-END:variables
}
